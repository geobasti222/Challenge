name: Despliegue de API Challenge en Azure

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: 1. Checkout del código
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 2. Configurar .NET SDK 8.0
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: 3. Instalar SonarScanner
      run: dotnet tool install --global dotnet-sonarscanner

    - name: 4. Iniciar Análisis Estático
      run: |
        dotnet sonarscanner begin /k:"geobasti222_Challenge" /o:"geobasti222" \
          /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
          /d:sonar.host.url="https://sonarcloud.io" \
          /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml"

    - name: 5. Restaurar Dependencias
      run: dotnet restore Challenge.sln

    - name: 6. Build
      run: dotnet build Challenge.sln --no-restore -c Release

    - name: 7. Pruebas
      run: dotnet test Challenge.sln --no-build -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover

    - name: 8. Finalizar Análisis Estático
      run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 9. Login en Azure Container Registry (ACR)
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      uses: docker/login-action@v3
      with:
        registry: challenge.azurecr.io 
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: 10. Build y Push de imagen Docker
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Devops.Api/Dockerfile
        push: true
        tags: |
          challenge.azurecr.io/challenge:${{ github.sha }}
          challenge.azurecr.io/challenge:latest
          
  deploy-to-prod:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    environment:
      name: production

    steps:
      - name: 1. Login en Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 2. Configurar suscripción
        run: |
          echo "🎯 Usando suscripción: Azure subscription 1"
          az account set --subscription "764ba8e4-f246-40b7-92ae-6178272c427d"

      - name: 3. Verificar y crear infraestructura
        run: |
          echo "🔍 Verificando infraestructura..."
          
          # Verificar Resource Group
          if ! az group show --name Challenge &>/dev/null; then
            echo "📦 Creando Resource Group..."
            az group create --name Challenge --location eastus --tags "project=challenge"
          else
            echo "✅ Resource Group existe"
          fi

          # Verificar App Service Plan - USANDO F1 (FREE) EN LUGAR DE B1
          if ! az appservice plan show --name challenge-plan --resource-group Challenge &>/dev/null; then
            echo "📊 Creando App Service Plan (FREE F1)..."
            az appservice plan create \
              --name challenge-plan \
              --resource-group Challenge \
              --sku F1 \
              --is-linux \
              --location eastus
          else
            echo "✅ App Service Plan existe"
          fi

          # Verificar Web App
          if ! az webapp show --name challenge-app --resource-group Challenge &>/dev/null; then
            echo "🌐 Creando Web App..."
            az webapp create \
              --name challenge-app \
              --resource-group Challenge \
              --plan challenge-plan \
              --runtime "DOTNETCORE:8.0" \
              --deployment-container-image-name challenge.azurecr.io/challenge:latest
          else
            echo "✅ Web App existe"
          fi

      - name: 4. Actualizar aplicación
        run: |
          echo "🚀 Actualizando aplicación con nueva versión..."
          az webapp config container set \
            --name challenge-app \
            --resource-group Challenge \
            --docker-custom-image-name challenge.azurecr.io/challenge:${{ github.sha }} \
            --docker-registry-server-url https://challenge.azurecr.io \
            --docker-registry-server-user ${{ secrets.ACR_USERNAME }} \
            --docker-registry-server-password ${{ secrets.ACR_PASSWORD }}

          echo "✅ Aplicación actualizada exitosamente"

      - name: 5. Obtener URL y mostrar información
        id: output
        run: |
          APP_URL=$(az webapp show --name challenge-app --resource-group Challenge --query "defaultHostName" -o tsv)
          echo "app_url=https://$APP_URL" >> $GITHUB_OUTPUT
          echo "🎉 ¡Despliegue completado!"
          echo "🌐 URL de la aplicación: https://$APP_URL"
          echo "🐳 Imagen desplegada: challenge.azurecr.io/challenge:${{ github.sha }}"
          echo "💡 Plan: F1 (Free) - Sin costo"