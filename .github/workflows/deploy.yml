name: Despliegue de API Challenge en Azure

# DISPARADORES (Requisitos 4, 7, 11)
on:
  # 1. Automático y en ramas (master/main despliega a prod)
  push:
    branches:
      - master  # Rama 'master' (o main) siempre despliega a producción
  
  # 2. En Pull Requests (para stages de Test)
  pull_request:
    branches:
      - master
      
  # 3. Ejecución bajo demanda
  workflow_dispatch:

jobs:
  # ETAPA 1: BUILD, TEST y ANÁLISIS (VERSIÓN .NET)
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: 1. Checkout del código
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Necesario para SonarCloud

    - name: 2. Configurar .NET SDK 8.0
      # Instala las herramientas de .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: 3. Instalar SonarScanner (Análisis Estático)
      # (Req 9) Instala la herramienta de Sonar para .NET
      run: dotnet tool install --global dotnet-sonarscanner

    - name: 4. Iniciar Análisis Estático
      # (Req 9) Inicia el escáner
      run: |
        dotnet sonarscanner begin /k:"geobasti222_Challenge" /o:"geobasti222" \
          /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
          /d:sonar.host.url="https://sonarcloud.io" \
          /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml"

    - name: 5. Restaurar Dependencias (Req 5)
      # Ejecuta 'dotnet restore' sobre tu archivo de solución
      run: dotnet restore Devops.Api.sln

    - name: 6. Build (Req 6)
      run: dotnet build Devops.Api.sln --no-restore -c Release

    - name: 7. Pruebas (Req 6 y 8)
      # Ejecuta los tests y genera un reporte de cobertura
      # Asume que tienes un proyecto de tests en tu solución
      run: >
        dotnet test Devops.Api.sln --no-build -c Release \
        /p:CollectCoverage=true /p:CoverletOutputFormat=opencover

    - name: 8. Finalizar Análisis Estático
      # (Req 9) Finaliza y envía los resultados a SonarCloud
      run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 9. Login en Azure Container Registry (ACR)
      if: github.ref == 'refs/heads/main' 
      uses: docker/login-action@v3
      with:
        registry: tu-acr.azurecr.io # Reemplaza con tu ACR
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: 10. Build y Push de imagen Docker (Req 1)
      if: github.ref == 'refs/heads/main'
      uses: docker/build-push-action@v5
      with:
        # CONTEXTO: La raíz del repo ('.')
        # Esto es correcto porque tu Dockerfile hace 'COPY Devops.Api/...'
        context: .
        
        # ARCHIVO: La ruta a tu Dockerfile
        file: ./Devops.Api/Dockerfile
        
        push: true
        tags: |
          tu-acr.azurecr.io/challenge:${{ github.sha }}
          tu-acr.azurecr.io/challenge:latest
