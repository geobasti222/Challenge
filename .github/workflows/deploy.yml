name: Despliegue de API Challenge en Azure

# DISPARADORES (Requisitos 4, 7, 11)
on:
  # 1. Automático y en ramas (master/main despliega a prod)
  push:
    branches:
      - master  # Rama 'master' (o main) siempre despliega a producción
  
  # 2. En Pull Requests (para stages de Test)
  pull_request:
    branches:
      - master
      
  # 3. Ejecución bajo demanda
  workflow_dispatch:

jobs:
  # ETAPA 1: BUILD, TEST y ANÁLISIS
  # (Cumple Requisitos 5, 6, 8, 9)
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: 1. Checkout del código
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Necesario para SonarCloud

    - name: 2. Configurar Java (JDK 17)
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'

    - name: 3. Gestión de Dependencias y Pruebas (Req 5 y 8)
      # 'package' ejecuta el 'test' de Maven automáticamente
      run: mvn -B package --file pom.xml

    - name: 4. Análisis Estático de Código (Req 9)
      # Asume que usas SonarCloud (gratis para repos públicos)
      # Necesitas el secreto SONAR_TOKEN
      if: success() # Solo corre si los tests pasan
      run: >
        mvn -B verify sonar:sonar \
          -Dsonar.projectKey=geobasti222_Challenge \
          -Dsonar.organization=tu-org-sonar \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.token=${{ secrets.SONAR_TOKEN }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Requerido para PRs

    - name: 5. Login en Azure Container Registry (ACR)
      if: github.ref == 'refs/heads/main' # Solo si es push a main
      uses: docker/login-action@v3
      with:
        registry: tu-acr.azurecr.io # Reemplaza con tu ACR
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: 6. Build y Push de imagen Docker (Req 1)
      if: github.ref == 'refs/heads/main'
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          tu-acr.azurecr.io/challenge:${{ github.sha }}
          tu-acr.azurecr.io/challenge:latest
          
  # ETAPA 2: DESPLIEGUE A PRODUCCIÓN
  # (Cumple Requisito 7: 'main' despliega a prod)
  deploy-to-prod:
    needs: build-and-test # Depende de la etapa anterior
    runs-on: ubuntu-latest
    
    # Solo se ejecuta si el trigger es un push a 'main'
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    environment:
      name: production # Define un entorno de GitHub
      url: ${{ steps.deploy.outputs.url }} # URL de la app

    steps:
    - name: 1. Checkout del código (para Bicep)
      uses: actions/checkout@v4

    - name: 2. Login en Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 3. Desplegar Infraestructura (IaC) y Actualizar App
      id: deploy
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: tu-rg-produccion
        template: ./infra/main.bicep # Ruta a tu archivo Bicep
        parameters: |
          imageName=tu-acr.azurecr.io/challenge:${{ github.sha }}
          # ...otros parámetros de Bicep
