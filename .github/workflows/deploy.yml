name: Despliegue de API Challenge en Azure

# DISPARADORES (Requisitos 4, 7, 11)
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: 1. Checkout del código
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 2. Configurar .NET SDK 8.0
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: 3. Instalar SonarScanner
      run: dotnet tool install --global dotnet-sonarscanner

    - name: 4. Iniciar Análisis Estático
      run: |
        dotnet sonarscanner begin /k:"geobasti222_Challenge" /o:"geobasti222" \
          /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
          /d:sonar.host.url="https://sonarcloud.io" \
          /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml"

    - name: 5. Restaurar Dependencias
      run: dotnet restore Challenge.sln

    - name: 6. Build
      run: dotnet build Challenge.sln --no-restore -c Release

    - name: 7. Pruebas
      run: dotnet test Challenge.sln --no-build -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover

    - name: 8. Finalizar Análisis Estático
      run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 9. Login en Azure Container Registry (ACR)
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      uses: docker/login-action@v3
      with:
        registry: challenge.azurecr.io 
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: 10. Build y Push de imagen Docker
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Devops.Api/Dockerfile
        push: true
        tags: |
          challenge.azurecr.io/challenge:${{ github.sha }}
          challenge.azurecr.io/challenge:latest
          
  deploy-to-prod:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    environment:
      name: production
      url: ${{ steps.output.outputs.app_url }}

    steps:
    - name: 1. Checkout del código
      uses: actions/checkout@v4

    - name: 2. Login en Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 3. Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.7.0"

    - name: 4. Terraform Init
      id: init
      run: terraform init
      working-directory: ./terraform

    - name: 5. Terraform Plan
      id: plan
      run: |
        terraform plan \
          -var="docker_tag=${{ github.sha }}" \
          -var="acr_username=${{ secrets.ACR_USERNAME }}" \
          -var="acr_password=${{ secrets.ACR_PASSWORD }}" \
          -out=tfplan
      working-directory: ./terraform

    - name: 6. Terraform Apply
      id: apply
      run: terraform apply -auto-approve tfplan
      working-directory: ./terraform

    - name: 7. Get App URL
      id: output
      run: |
        echo "app_url=$(terraform output -raw app_url)" >> $GITHUB_OUTPUT
      working-directory: ./terraform