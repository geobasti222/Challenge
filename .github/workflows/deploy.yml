name: Despliegue de API Challenge en Azure

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: 1. Checkout del cÃ³digo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 2. Configurar .NET SDK 8.0
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: 3. Instalar SonarScanner
      run: dotnet tool install --global dotnet-sonarscanner

    - name: 4. Iniciar AnÃ¡lisis EstÃ¡tico
      run: |
        dotnet sonarscanner begin /k:"geobasti222_Challenge" /o:"geobasti222" \
          /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
          /d:sonar.host.url="https://sonarcloud.io" \
          /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml"

    - name: 5. Restaurar Dependencias
      run: dotnet restore Challenge.sln

    - name: 6. Build
      run: dotnet build Challenge.sln --no-restore -c Release

    - name: 7. Pruebas
      run: dotnet test Challenge.sln --no-build -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover

    - name: 8. Finalizar AnÃ¡lisis EstÃ¡tico
      run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 9. Login en Azure Container Registry (ACR)
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      uses: docker/login-action@v3
      with:
        registry: challenge.azurecr.io 
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: 10. Build y Push de imagen Docker
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Devops.Api/Dockerfile
        push: true
        tags: |
          challenge.azurecr.io/challenge:${{ github.sha }}
          challenge.azurecr.io/challenge:latest
          
  deploy-to-prod:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    environment:
      name: production

    steps:
      - name: 1. Login en Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 2. Registrar proveedor y crear/actualizar App Service
        run: |
          # Registrar el proveedor Microsoft.Web
          echo "Registrando proveedor Microsoft.Web..."
          az provider register --namespace Microsoft.Web --wait

          # Esperar a que el registro se complete
          echo "Esperando registro de Microsoft.Web..."
          while true; do
            REGISTRATION_STATE=$(az provider show --namespace Microsoft.Web --query "registrationState" -o tsv)
            if [ "$REGISTRATION_STATE" == "Registered" ]; then
              echo "Microsoft.Web estÃ¡ registrado"
              break
            fi
            echo "Estado del registro: $REGISTRATION_STATE - esperando 10 segundos..."
            sleep 10
          done

          # Crear App Service Plan si no existe
          if ! az appservice plan show --name challenge-plan --resource-group Challenge &>/dev/null; then
            echo "Creando App Service Plan..."
            az appservice plan create \
              --name challenge-plan \
              --resource-group Challenge \
              --sku B1 \
              --is-linux
          else
            echo "App Service Plan ya existe"
          fi

          # Crear Web App si no existe
          if ! az webapp show --name challenge-app --resource-group Challenge &>/dev/null; then
            echo "Creando Web App..."
            az webapp create \
              --name challenge-app \
              --resource-group Challenge \
              --plan challenge-plan \
              --runtime "DOTNETCORE:8.0" \
              --deployment-container-image-name challenge.azurecr.io/challenge:latest
          else
            echo "Web App ya existe"
          fi

          # Actualizar la imagen del contenedor
          echo "Actualizando imagen del contenedor..."
          az webapp config container set \
            --name challenge-app \
            --resource-group Challenge \
            --docker-custom-image-name challenge.azurecr.io/challenge:${{ github.sha }} \
            --docker-registry-server-url https://challenge.azurecr.io \
            --docker-registry-server-user ${{ secrets.ACR_USERNAME }} \
            --docker-registry-server-password ${{ secrets.ACR_PASSWORD }}

          echo "âœ… Despliegue completado exitosamente"

      - name: 3. Get App URL
        id: output
        run: |
          APP_URL=$(az webapp show --name challenge-app --resource-group Challenge --query "defaultHostName" -o tsv)
          echo "app_url=https://$APP_URL" >> $GITHUB_OUTPUT
          echo "ðŸŽ‰ AplicaciÃ³n desplegada en: https://$APP_URL"