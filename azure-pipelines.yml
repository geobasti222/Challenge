# azure-pipelines.yml
trigger:
  branches:
    include:
      - master
      - develop

pr:
  branches:
    include:
      - master
      - develop

variables:
  - name: buildConfiguration
    value: 'Release'
  - name: vmImage
    value: 'ubuntu-latest'
  - name: solution
    value: 'Challenge.sln'
  - name: testProject
    value: 'Tests/**/*.csproj'
  
  # Docker/ACR
  - name: acrServiceConnection
    value: 'challengeserviceconnection'
  - name: imageName
    value: 'devops-api'
  - name: dockerfilePath
    value: 'Devops.Api/Dockerfile'
  
  # Terraform
  - name: tfServiceConnection
    value: 'MychallengeServiceConnection'
  - name: tfWorkingDirectory
    value: 'terraform'
  - name: tfBackendRg
    value: 'TerraformStateResourceGroup'
  - name: tfBackendStorage
    value: 'terraformstateSA'
  - name: tfBackendContainer
    value: 'tfstate'

stages:
# STAGE 1: BUILD Y TEST
- stage: Build_Test
  displayName: 'Build and Test'
  jobs:
  - job: Build
    displayName: 'Build and Test Application'
    pool:
      vmImage: $(vmImage)
    
    steps:
    # GESTIÓN DE DEPENDENCIAS
    - task: UseDotNet@2
      displayName: 'Use .NET 8.0'
      inputs:
        packageType: 'sdk'
        version: '8.0.x'

    - task: DotNetCoreCLI@2
      displayName: 'Restore Dependencies'
      inputs:
        command: 'restore'
        projects: $(solution)

    # ANÁLISIS ESTÁTICO DE CÓDIGO
    - task: DotNetCoreCLI@2
      displayName: 'Install dotnet-format tool'
      inputs:
        command: 'custom'
        custom: 'tool'
        arguments: 'install --global dotnet-format'
      condition: succeeded()

    - task: DotNetCoreCLI@2
      displayName: 'Run Code Analysis with dotnet-format'
      inputs:
        command: 'custom'
        custom: 'format'
        arguments: '--verify-no-changes --verbosity diagnostic'
      condition: succeeded()

    # BUILD
    - task: DotNetCoreCLI@2
      displayName: 'Build Solution'
      inputs:
        command: 'build'
        projects: $(solution)
        arguments: '--configuration $(buildConfiguration) --no-restore'

    # PRUEBAS AUTOMATIZADAS
    - task: DotNetCoreCLI@2
      displayName: 'Run Unit Tests'
      inputs:
        command: 'test'
        projects: $(testProject)
        arguments: '--configuration $(buildConfiguration) --no-build --logger trx --collect:"XPlat Code Coverage"'
        publishTestResults: true

    # CONTAINERIZACIÓN
    - task: Docker@2
      displayName: 'Build and Push Docker Image'
      inputs:
        command: 'buildAndPush'
        repository: $(imageName)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(acrServiceConnection)
        tags: |
          $(Build.BuildId)
          latest

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Terraform Artifact'
      inputs:
        PathtoPublish: '$(tfWorkingDirectory)'
        ArtifactName: 'terraform'

# STAGE 2: DESPLIEGUE DEVELOPMENT (WEB APP)
- stage: Deploy_Dev
  displayName: 'Deploy to Development'
  dependsOn: Build_Test
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  jobs:
  - deployment: DeployWebApp
    displayName: 'Deploy to Web App'
    pool:
      vmImage: $(vmImage)
    environment: 'Development'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - download: current
            artifact: terraform
            
          - task: TerraformInstaller@0
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: '1.5.0'

          - task: TerraformTaskV4@4
            displayName: 'Terraform Init (Dev)'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(Pipeline.Workspace)/terraform'
              backendServiceArm: $(tfServiceConnection)
              backendAzureRmResourceGroupName: $(tfBackendRg)
              backendAzureRmStorageAccountName: $(tfBackendStorage)
              backendAzureRmContainerName: $(tfBackendContainer)
              backendAzureRmKey: 'dev.tfstate'

          - task: TerraformTaskV4@4
            displayName: 'Terraform Plan (Dev)'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(Pipeline.Workspace)/terraform'
              environmentServiceNameAzureRM: $(tfServiceConnection)
              commandOptions: '-var="docker_tag=$(Build.BuildId)" -var="environment=dev" -var="deployment_target=webapp" -out=tfplan'

          - task: TerraformTaskV4@4
            displayName: 'Terraform Apply (Dev)'
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(Pipeline.Workspace)/terraform'
              environmentServiceNameAzureRM: $(tfServiceConnection)
              commandOptions: 'tfplan'

# STAGE 3: DESPLIEGUE PRODUCTION (AKS)
- stage: Deploy_Prod
  displayName: 'Deploy to Production'
  dependsOn: Build_Test
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: DeployAKS
    displayName: 'Deploy to AKS'
    pool:
      vmImage: $(vmImage)
    environment: 'Production'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - download: current
            artifact: terraform
            
          - task: TerraformInstaller@0
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: '1.5.0'

          - task: TerraformTaskV4@4
            displayName: 'Terraform Init (Prod)'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(Pipeline.Workspace)/terraform'
              backendServiceArm: $(tfServiceConnection)
              backendAzureRmResourceGroupName: $(tfBackendRg)
              backendAzureRmStorageAccountName: $(tfBackendStorage)
              backendAzureRmContainerName: $(tfBackendContainer)
              backendAzureRmKey: 'prod.tfstate'

          - task: TerraformTaskV4@4
            displayName: 'Terraform Plan (Prod)'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(Pipeline.Workspace)/terraform'
              environmentServiceNameAzureRM: $(tfServiceConnection)
              commandOptions: '-var="docker_tag=$(Build.BuildId)" -var="environment=prod" -var="deployment_target=aks" -out=tfplan'

          - task: TerraformTaskV4@4
            displayName: 'Terraform Apply (Prod)'
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(Pipeline.Workspace)/terraform'
              environmentServiceNameAzureRM: $(tfServiceConnection)
              commandOptions: 'tfplan'