# azure-pipelines.yml
trigger:
  branches:
    include:
      - master
      - develop

pr:
  branches:
    include:
      - master
      - develop

variables:
  - name: buildConfiguration
    value: 'Release'
  - name: vmImage
    value: 'ubuntu-latest'
  - name: solution
    value: 'Challenge.sln'
  - name: testProject
    value: 'Tests/**/*.csproj'
  
  # Docker/ACR
  - name: acrServiceConnection
    value: 'challengeserviceconnection'
  - name: acrName
    value: 'challenge.azurecr.io'
  - name: imageName
    value: 'devops-api'
  - name: dockerfilePath
    value: 'Devops.Api/Dockerfile'
  
  # AKS Configuration
  - name: azureServiceConnection
    value: 'MychallengeServiceConnection'
  - name: aksResourceGroup
    value: 'Challenge'
  - name: aksClusterName
    value: 'akschalle'
  - name: aksNamespaceDev
    value: 'devops-app-dev'
  - name: aksNamespaceProd
    value: 'devops-app-prod'

stages:
# STAGE 1: BUILD Y TEST
- stage: Build_Test
  displayName: 'Build and Test'
  jobs:
  - job: Build
    displayName: 'Build and Test Application'
    pool:
      vmImage: $(vmImage)
    
    steps:
    # GESTIÓN DE DEPENDENCIAS
    - task: UseDotNet@2
      displayName: 'Use .NET 8.0'
      inputs:
        packageType: 'sdk'
        version: '8.0.x'

    - task: DotNetCoreCLI@2
      displayName: 'Restore Dependencies'
      inputs:
        command: 'restore'
        projects: $(solution)

    # ANÁLISIS ESTÁTICO DE CÓDIGO
    - task: DotNetCoreCLI@2
      displayName: 'Install dotnet-format tool'
      inputs:
        command: 'custom'
        custom: 'tool'
        arguments: 'install --global dotnet-format'
      condition: succeeded()

    - task: CmdLine@2
      displayName: 'Apply code formatting'
      inputs:
        script: 'dotnet format --verbosity minimal'
      condition: succeeded()

    # BUILD
    - task: DotNetCoreCLI@2
      displayName: 'Build Solution'
      inputs:
        command: 'build'
        projects: $(solution)
        arguments: '--configuration $(buildConfiguration) --no-restore'

    # PRUEBAS AUTOMATIZADAS
    - task: DotNetCoreCLI@2
      displayName: 'Run Unit Tests'
      inputs:
        command: 'test'
        projects: $(testProject)
        arguments: '--configuration $(buildConfiguration) --no-build --logger trx --collect:"XPlat Code Coverage"'
        publishTestResults: true

    # CONTAINERIZACIÓN
    - task: Docker@2
      displayName: 'Build and Push Docker Image'
      inputs:
        command: 'buildAndPush'
        repository: $(imageName)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(acrServiceConnection)
        tags: |
          $(Build.BuildId)
          latest

    # PUBLICAR MANIFIESTOS COMO ARTEFACTO
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Kubernetes Manifests'
      inputs:
        PathtoPublish: 'manifests'
        ArtifactName: 'manifests'

# STAGE 2: DEPLOY TO DEVELOPMENT
- stage: Deploy_Dev
  displayName: 'Deploy to Development'
  dependsOn: Build_Test
  condition: |
    and(
      succeeded(),
      or(
        eq(variables['Build.SourceBranch'], 'refs/heads/develop'),
        startsWith(variables['Build.SourceBranch'], 'refs/heads/feature/')
      )
    )
  jobs:
  - deployment: Deploy_Development
    displayName: 'Deploy to Development'
    pool:
      vmImage: $(vmImage)
    environment: 'Development'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - download: current
            artifact: manifests

          - task: AzureCLI@2
            displayName: 'Verify Azure Connection'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "=== VERIFICANDO CONEXIÓN AZURE ==="
                az account show
                echo "✅ Conexión a Azure exitosa"

          - task: AzureCLI@2
            displayName: 'Deploy to AKS (Development)'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                set -e
                echo "=== INICIANDO DESPLIEGUE EN DESARROLLO ==="
                
                # Verificar que los manifiestos existen
                echo "Verificando archivos de manifiesto..."
                ls -la $(Pipeline.Workspace)/manifests/
                ls -la $(Pipeline.Workspace)/manifests/development/
                
                echo "=== OBTENIENDO CREDENCIALES AKS ==="
                az aks get-credentials \
                  --resource-group $(aksResourceGroup) \
                  --name $(aksClusterName) \
                  --overwrite-existing \
                  --verbose
                
                echo "=== VERIFICANDO CONEXIÓN A KUBERNETES ==="
                kubectl cluster-info
                kubectl get nodes
                
                echo "=== APLICANDO CONFIGURACIÓN DE DESARROLLO ==="
                # Aplicar con Kustomize
                kubectl apply -k $(Pipeline.Workspace)/manifests/development/ --dry-run=client
                kubectl apply -k $(Pipeline.Workspace)/manifests/development/
                
                echo "=== VERIFICANDO DESPLIEGUE ==="
                # Esperar y verificar
                sleep 30
                kubectl get all -n $(aksNamespaceDev)
                kubectl rollout status deployment/devops-api -n $(aksNamespaceDev) --timeout=180s
                
                echo "🎉 ✅ DESARROLLO DESPLEGADO EXITOSAMENTE"
                echo "📦 Namespace: $(aksNamespaceDev)"
                echo "🐳 Imagen: $(acrName)/$(imageName):develop-latest"

          - task: Bash@3
            displayName: 'Final Verification'
            inputs:
              targetType: 'inline'
              script: |
                echo "=== VERIFICACIÓN FINAL ==="
                echo "✅ Build: $(Build.BuildId)"
                echo "✅ Rama: $(Build.SourceBranch)"
                echo "✅ Entorno: Development"
                echo "✅ Despliegue completado"

# STAGE 3: DEPLOY TO PRODUCTION
- stage: Deploy_Prod
  displayName: 'Deploy to Production'
  dependsOn: Build_Test  # ← CORREGIDO: Cambiado de 'Test' a 'Build_Test'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: Deploy_Production
    displayName: 'Deploy to Production with Full Configuration'
    pool:
      vmImage: $(vmImage)
    environment: 'Production'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - download: current  # ← AGREGADO: Descargar artefactos
            artifact: manifests

          - task: Bash@3
            displayName: 'Update Production Image Tag'
            inputs:
              targetType: 'inline'
              script: |
                # Actualizar tag en kustomization
                sed -i "s|BUILD_TAG|$(Build.BuildId)|g" $(Pipeline.Workspace)/manifests/production/kustomization.yaml
                echo "✅ Image tag actualizado a: $(Build.BuildId)"

          - task: AzureCLI@2
            displayName: 'Deploy to AKS (Production)'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                set -e
                echo "=== DESPLIEGUE EN PRODUCCIÓN ==="
                
                az aks get-credentials --resource-group $(aksResourceGroup) --name $(aksClusterName) --overwrite-existing
                
                # Usar Kustomize para producción
                kubectl apply -k $(Pipeline.Workspace)/manifests/production/
                
                # Verificar despliegue
                kubectl rollout status deployment/devops-api -n $(aksNamespaceProd) --timeout=300s
                
                echo "✅ Producción desplegada con alta disponibilidad"
                kubectl get pods -n $(aksNamespaceProd)
                kubectl get hpa -n $(aksNamespaceProd) 2>/dev/null || echo "HPA no disponible"