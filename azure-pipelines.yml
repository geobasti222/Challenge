# Pipeline principal
name: $(BuildID)-$(SourceBranchName)-$(Date:yyyyMMdd)$(Rev:.r)

trigger:
  branches:
    include:
      - master
      - develop

pr:
  branches:
    include:
      - master
      - develop

# Variables globales
variables:
  - name: vmImage
    value: 'ubuntu-latest'
  - name: buildConfiguration
    value: 'Release'
  - name: solution
    value: 'Challenge.sln'
  - name: testProject
    value: 'Tests/**/*.csproj'
  - name: dockerfilePath
    value: 'Devops.Api/Dockerfile'
  - name: acrServiceConnection
    value: 'challengeserviceconnection'
  - name: acrName
    value: 'challenge.azurecr.io'
  - name: imageName
    value: 'devops-api'
  - name: azureServiceConnection
    value: 'MychallengeServiceConnection'
  - name: aksResourceGroup
    value: 'Challenge'
  - name: aksClusterName
    value: 'akschalle'
  - name: aksNamespaceDev
    value: 'devops-app-dev'
  - name: aksNamespaceProd
    value: 'devops-app-prod'

stages:
  # Build Stage
  - stage: Build
    displayName: 'Build Application'
    jobs:
    - template: .azuredevops/pipeline-templates/build-job.yml

  # Test Stage
  - stage: Test
    displayName: 'Run Tests'
    dependsOn: Build
    jobs:
    - template: .azuredevops/pipeline-templates/test-job.yml

  # Development Deployment
  - stage: Deploy_Dev
    displayName: 'Deploy to Development'
    dependsOn: Test
    condition: |
      and(
        succeeded(),
        or(
          eq(variables['Build.SourceBranch'], 'refs/heads/develop'),
          startsWith(variables['Build.SourceBranch'], 'refs/heads/feature/')
        )
      )
    jobs:
    - template: .azuredevops/pipeline-templates/deploy-dev-job.yml

  # Production Deployment
  - stage: Deploy_Prod
    displayName: 'Deploy to Production'
    dependsOn: Test
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    jobs:
    - template: .azuredevops/pipeline-templates/deploy-prod-job.yml