# azure-pipelines.yml
trigger:
  branches:
    include:
      - master
      - develop

pr:
  branches:
    include:
      - master
      - develop

variables:
  - name: buildConfiguration
    value: 'Release'
  - name: vmImage
    value: 'ubuntu-latest'
  - name: solution
    value: 'Challenge.sln'
  - name: testProject
    value: 'Tests/**/*.csproj'
  
  # Docker/ACR
  - name: acrServiceConnection
    value: 'challengeserviceconnection'
  - name: acrName
    value: 'challenge.azurecr.io'
  - name: imageName
    value: 'devops-api'
  - name: dockerfilePath
    value: 'Devops.Api/Dockerfile'
  
  # AKS Configuration
  - name: azureServiceConnection
    value: 'MychallengeServiceConnection'
  - name: aksResourceGroup
    value: 'Challenge'
  - name: aksClusterName
    value: 'akschalle'
  - name: aksNamespace
    value: 'devops-app'

stages:
# STAGE 1: BUILD Y TEST
- stage: Build_Test
  displayName: 'Build and Test'
  jobs:
  - job: Build
    displayName: 'Build and Test Application'
    pool:
      vmImage: $(vmImage)
    
    steps:
    # GESTIÓN DE DEPENDENCIAS
    - task: UseDotNet@2
      displayName: 'Use .NET 8.0'
      inputs:
        packageType: 'sdk'
        version: '8.0.x'

    - task: DotNetCoreCLI@2
      displayName: 'Restore Dependencies'
      inputs:
        command: 'restore'
        projects: $(solution)

    # ANÁLISIS ESTÁTICO DE CÓDIGO
    - task: DotNetCoreCLI@2
      displayName: 'Install dotnet-format tool'
      inputs:
        command: 'custom'
        custom: 'tool'
        arguments: 'install --global dotnet-format'
      condition: succeeded()

    - task: CmdLine@2
      displayName: 'Apply code formatting'
      inputs:
        script: 'dotnet format --verbosity minimal'
      condition: succeeded()

    # BUILD
    - task: DotNetCoreCLI@2
      displayName: 'Build Solution'
      inputs:
        command: 'build'
        projects: $(solution)
        arguments: '--configuration $(buildConfiguration) --no-restore'

    # PRUEBAS AUTOMATIZADAS
    - task: DotNetCoreCLI@2
      displayName: 'Run Unit Tests'
      inputs:
        command: 'test'
        projects: $(testProject)
        arguments: '--configuration $(buildConfiguration) --no-build --logger trx --collect:"XPlat Code Coverage"'
        publishTestResults: true

    # CONTAINERIZACIÓN
    - task: Docker@2
      displayName: 'Build and Push Docker Image'
      inputs:
        command: 'buildAndPush'
        repository: $(imageName)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(acrServiceConnection)
        tags: |
          $(Build.BuildId)
          latest

    # PUBLICAR MANIFIESTOS COMO ARTEFACTO
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Kubernetes Manifests'
      inputs:
        PathtoPublish: 'manifests'
        ArtifactName: 'manifests'

# STAGE 3: DESPLIEGUE PRODUCTION (AKS)
- stage: Deploy_Prod
  displayName: 'Deploy to AKS Production'
  dependsOn: Build_Test
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  jobs:
  - deployment: DeployAKS
    displayName: 'Deploy to AKS'
    pool:
      vmImage: $(vmImage)
    environment: 'Production'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - download: current
            artifact: manifests

          # DESPLIEGUE A AKS USANDO AZURE CLI (MÁS CONFIABLE)
          - task: AzureCLI@2
            displayName: 'Deploy to AKS using kubectl'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                set -e  # Exit on error
                
                echo "=== OBTENIENDO CREDENCIALES DE AKS ==="
                az aks get-credentials \
                  --resource-group $(aksResourceGroup) \
                  --name $(aksClusterName) \
                  --overwrite-existing
                echo "✅ Credenciales de AKS configuradas"
                
                # Mostrar información del cluster
                echo "=== INFORMACIÓN DEL CLUSTER ==="
                kubectl cluster-info
                kubectl get nodes
                
                echo "=== ACTUALIZANDO IMAGEN EN MANIFIESTO ==="
                sed -i "s|challenge.azurecr.io/devops-api:latest|$(acrName)/$(imageName):$(Build.BuildId)|g" $(Pipeline.Workspace)/manifests/deployment.yaml
                echo "✅ Imagen actualizada: $(acrName)/$(imageName):$(Build.BuildId)"
                
                echo "=== APLICANDO MANIFIESTOS ==="
                kubectl apply -f $(Pipeline.Workspace)/manifests/namespace.yaml
                echo "✅ Namespace creado"
                
                kubectl apply -f $(Pipeline.Workspace)/manifests/deployment.yaml
                echo "✅ Deployment aplicado"
                
                kubectl apply -f $(Pipeline.Workspace)/manifests/service.yaml
                echo "✅ Service creado"
                
                echo "=== VERIFICANDO DESPLIEGUE ==="
                kubectl rollout status deployment/devops-api -n $(aksNamespace) --timeout=300s
                echo "✅ Deployment completado exitosamente"
                
                echo "=== INFORMACIÓN FINAL ==="
                kubectl get pods -n $(aksNamespace)
                kubectl get service devops-api-service -n $(aksNamespace) -o wide
                
                echo ""
                echo "🎉 DESPLIEGUE EXITOSO"
                echo "📦 Aplicación: devops-api"
                echo "🏷️  Imagen: $(acrName)/$(imageName):$(Build.BuildId)"
                echo "📁 Namespace: $(aksNamespace)"
                echo "🖥️  Cluster: $(aksClusterName)"

          # HEALTH CHECK ADICIONAL
          - task: Bash@3
            displayName: 'Final Health Check'
            inputs:
              targetType: 'inline'
              script: |
                echo "=== RESUMEN DEL DESPLIEGUE ==="
                echo "✅ Build completado: $(Build.BuildId)"
                echo "✅ Imagen publicada en ACR"
                echo "✅ Aplicación desplegada en AKS"
                echo "✅ Todos los manifiestos aplicados"
                echo ""
                echo "La aplicación está lista en el cluster AKS"